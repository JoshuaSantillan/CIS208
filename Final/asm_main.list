     1                                  ; File: asm_main.asm
     2                                  ; Author: Joshua Santillan
     3                                  ; Date: Nov 28, 2019
     4                                  ; description: Create an array of integers and multiply it by some scalar
     5                                  %include "asm_io.inc"
     1                              <1> 	extern  read_int, print_int, print_string
     2                              <1> 	extern	read_char, print_char, print_nl
     3                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     4                              <1> 
     5                              <1> %macro 	dump_regs 1
     6                              <1> 	push	  dword %1
     7                              <1> 	call	  sub_dump_regs
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> 
    11                              <1> ;
    12                              <1> ; usage: dump_mem label, start-address, # paragraphs
    13                              <1> %macro  dump_mem 3
    14                              <1> 	push	 dword %1
    15                              <1> 	push	 dword %2
    16                              <1> 	push	 dword %3
    17                              <1> 	call	 sub_dump_mem
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> %macro	dump_math 1
    21                              <1> 	push	 dword %1
    22                              <1> 	call	 sub_dump_math
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro  dump_stack 3
    26                              <1> 	push	 dword %3
    27                              <1>         push     dword %2
    28                              <1> 	push	 dword %1
    29                              <1>         call     sub_dump_stack
    30                              <1> %endmacro
     6                                  ;
     7                                  ; initialized data is put in the .data segment
     8                                  ;
     9                                  segment .data
    10 00000000 B400000020000000C7-             a1 dd 180, 32, 455, 499, 388, 480, 239, 346, 257,84
    10 00000009 010000F30100008401-
    10 00000012 0000E0010000EF0000-
    10 0000001B 005A01000001010000-
    10 00000024 54000000           
    11 00000028 0A000000                        arrlength dd 10
    12 0000002C 0A000000                        scale dd 10
    13 00000030 000000000000000000-             a2 dd 0 , 0 , 0 , 0 , 0, 0 , 0, 0, 0, 0
    13 00000039 000000000000000000-
    13 00000042 000000000000000000-
    13 0000004B 000000000000000000-
    13 00000054 00000000           
    14 00000058 000000000000000000-             a3 dd 0 , 0 , 0 , 0 , 0, 0 , 0, 0, 0, 0
    14 00000061 000000000000000000-
    14 0000006A 000000000000000000-
    14 00000073 000000000000000000-
    14 0000007C 00000000           
    15 00000080 000000000000000000-             a4 dd 0 , 0 , 0 , 0 , 0, 0 , 0, 0, 0, 0
    15 00000089 000000000000000000-
    15 00000092 000000000000000000-
    15 0000009B 000000000000000000-
    15 000000A4 00000000           
    16                                  ; uninitialized data is put in the .bss segment
    17                                  ;
    18                                  segment .bss
    19                                  ;
    20                                  ; code is put in the .text segment
    21                                  ;
    22                                  segment .text
    23                                          global  asm_main
    24                                  asm_main:
    25 00000000 C8000000                        enter   0,0               ; setup routine
    26 00000004 60                              pusha
    27 00000005 B8[00000000]                    mov eax, a1
    28 0000000A 8B1D[2C000000]                  mov ebx, [scale]
    29 00000010 8B0D[28000000]                  mov ecx, [arrlength]
    30 00000016 50                              push eax
    31 00000017 53                              push ebx
    32 00000018 51                              push ecx
    33 00000019 E8D3000000                      call array_scalar
    34 0000001E E8ED000000                      call array_add
    35 00000023 59                              pop ecx
    36 00000024 5B                              pop ebx
    37 00000025 58                              pop eax
    38                                  
    39 00000026 B8[00000000]                    mov eax, a1
    40 0000002B BB[58000000]                    mov ebx, a3
    41 00000030 8B0D[28000000]                  mov ecx,[arrlength]
    42 00000036 50                              push eax
    43 00000037 53                              push ebx
    44 00000038 51                              push ecx
    45 00000039 E8F0000000                      call onethree
    46 0000003E 59                              pop ecx
    47 0000003F 5B                              pop ebx
    48 00000040 58                              pop eax
    49                                  
    50 00000041 8B0D[28000000]                  mov ecx, [arrlength]
    51 00000047 BA00000000                      mov edx, 0
    52                                  printloop: ;; prints valus of array
    53 0000004C 8B82[00000000]                  mov eax, [a1+edx]
    54 00000052 E8(00000000)                    call print_int
    55 00000057 B820000000                      mov eax, " "
    56 0000005C E8(00000000)                    call print_char
    57 00000061 83C204                          add edx, 4
    58 00000064 E2E6                            loop printloop
    59                                          
    60 00000066 E8(00000000)                    call print_nl
    61 0000006B 8B0D[28000000]                  mov ecx, [arrlength]
    62 00000071 BA00000000                      mov edx, 0
    63                                  printloop2: ;; prints valus of array
    64 00000076 8B82[30000000]                  mov eax, [a2+edx]
    65 0000007C E8(00000000)                    call print_int
    66 00000081 B820000000                      mov eax, " "
    67 00000086 E8(00000000)                    call print_char
    68 0000008B 83C204                          add edx, 4
    69 0000008E E2E6                            loop printloop2
    70                                  
    71 00000090 E8(00000000)                    call print_nl
    72 00000095 8B0D[28000000]                  mov ecx, [arrlength]
    73 0000009B BA00000000                      mov edx, 0
    74                                  printloop3: ;; prints valus of array
    75 000000A0 8B82[58000000]                  mov eax, [a3+edx]
    76 000000A6 E8(00000000)                    call print_int
    77 000000AB B820000000                      mov eax, " "
    78 000000B0 E8(00000000)                    call print_char
    79 000000B5 83C204                          add edx, 4
    80 000000B8 E2E6                            loop printloop3
    81                                  
    82 000000BA E8(00000000)                    call print_nl
    83 000000BF 8B0D[28000000]                  mov ecx, [arrlength]
    84 000000C5 BA00000000                      mov edx, 0
    85                                  printloop4: ;; prints valus of array
    86 000000CA 8B82[80000000]                  mov eax, [a4+edx]
    87 000000D0 E8(00000000)                    call print_int
    88 000000D5 B820000000                      mov eax, " "
    89 000000DA E8(00000000)                    call print_char
    90 000000DF 83C204                          add edx, 4
    91 000000E2 E2E6                            loop printloop4
    92 000000E4 E8(00000000)                    call print_nl
    93                                  ; *********** End Assignment Code **********************
    94                                  
    95 000000E9 61                              popa
    96 000000EA B800000000                      mov     eax, 0
    97 000000EF C9                              leave                     
    98 000000F0 C3                              ret
    99                                  array_scalar:
   100 000000F1 55                              push    ebp
   101 000000F2 89E5                            mov     ebp,esp
   102                                  
   103 000000F4 FC                              cld
   104 000000F5 8B4D08                          mov ecx, [ebp +8]
   105 000000F8 8B5D0C                          mov ebx, [ebp +12]
   106 000000FB 8B7510                          mov esi, [ebp + 16]
   107 000000FE BF[58000000]                    mov edi, a3
   108                                  
   109                                      loop2:
   110 00000103 8B16                            mov edx,[esi]
   111 00000105 0FAFD3                          imul edx, ebx
   112 00000108 89D0                            mov eax,edx
   113 0000010A AB                              stosd
   114 0000010B AD                              lodsd
   115 0000010C E2F5                            loop loop2
   116 0000010E 5D                              pop ebp
   117 0000010F C3                              ret
   118                                  array_add:
   119 00000110 55                              push    ebp
   120 00000111 89E5                            mov     ebp,esp
   121                                  
   122 00000113 FC                              cld
   123 00000114 8B4D08                          mov ecx, [ebp +8]
   124 00000117 8B5D0C                          mov ebx, [ebp +12]
   125 0000011A 8B7510                          mov esi, [ebp + 16]
   126 0000011D BF[30000000]                    mov edi, a2
   127                                  
   128                                      loop1:
   129 00000122 8B16                            mov edx,[esi]
   130 00000124 01DA                            add edx, ebx
   131 00000126 89D0                            mov eax,edx
   132 00000128 AB                              stosd
   133 00000129 AD                              lodsd
   134 0000012A E2F6                            loop loop1
   135                                  
   136 0000012C 5D                              pop ebp
   137 0000012D C3                              ret
   138                                  
   139                                  onethree:
   140 0000012E 55                              push    ebp
   141 0000012F 89E5                            mov     ebp,esp
   142                                  
   143 00000131 FC                              cld
   144 00000132 8B4D08                          mov ecx, [ebp +8]
   145 00000135 8B5D0C                          mov ebx, [ebp +12]
   146 00000138 8B7510                          mov esi, [ebp + 16]
   147 0000013B BF[80000000]                    mov edi, a4
   148                                      loop4:
   149 00000140 8B16                            mov edx, [esi]
   150 00000142 0313                            add edx, [ebx]
   151 00000144 89D0                            mov eax, edx
   152 00000146 AB                              stosd 
   153 00000147 AD                              lodsd
   154 00000148 83C304                          add ebx, 4
   155 0000014B E2F3                            loop loop4
   156                                         
   157 0000014D 5D                              pop ebp
   158 0000014E C3                              ret
